From c762d1360602fb46a0ec0c26a032db8c4ba97c0f Mon Sep 17 00:00:00 2001
From: vgdn1942 <vgdn1942@gmail.com>
Date: Fri, 13 Aug 2021 06:49:40 +0300
Subject: [PATCH 02/12] Fix backlight on offline charger

Change-Id: Icd1fecb37239ed6f8e8942edbd4f06caa8fa65e2
---
 healthd/healthd_mode_charger.cpp | 84 ++++++++++++++++++++++++++++++++
 1 file changed, 84 insertions(+)

diff --git a/healthd/healthd_mode_charger.cpp b/healthd/healthd_mode_charger.cpp
index e95efc04c..42be5af10 100644
--- a/healthd/healthd_mode_charger.cpp
+++ b/healthd/healthd_mode_charger.cpp
@@ -19,6 +19,7 @@
 #include <dirent.h>
 #include <errno.h>
 #include <fcntl.h>
+#include <fstream>
 #include <inttypes.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -268,6 +269,64 @@ out:
     LOGW("\n");
 }
 
+#define BACKLIGHT_LEVEL     127
+#define LED_LEVEL           255
+
+#define BACKLIGHT_PATH      "/sys/class/leds/lcd-backlight/brightness"
+#define RED_LED_PATH        "/sys/class/leds/mt6370_pmu_led4/brightness"
+#define GREEN_LED_PATH      "/sys/class/leds/mt6370_pmu_led2/brightness"
+#define BLUE_LED_PATH       "/sys/class/leds/mt6370_pmu_led3/brightness"
+
+bool anim_was_run = false;
+
+enum Color {
+    COLOR_BACKLIGHT,
+    COLOR_RED,
+    COLOR_GREEN,
+    COLOR_BLUE
+};
+
+void display_set_backlight(Color color, bool on) {
+    int fd;
+    int res;
+    int level;
+    char buffer[10];
+    const char *pathname;
+
+    switch (color) {
+        case COLOR_BACKLIGHT:
+            pathname = BACKLIGHT_PATH;
+            level = BACKLIGHT_LEVEL;
+            break;
+        case COLOR_RED:
+            pathname = RED_LED_PATH;
+            level = LED_LEVEL;
+            break;
+        case COLOR_GREEN:
+            pathname = GREEN_LED_PATH;
+            level = LED_LEVEL;
+            break;
+        case COLOR_BLUE:
+            pathname = BLUE_LED_PATH;
+            level = LED_LEVEL;
+            break;
+    }
+    memset(buffer, '\0', sizeof(buffer));
+    fd = open(pathname, O_RDWR);
+    if (fd < 0) {
+        LOGE("Could not open backlight node : %s\n", strerror(errno));
+        return;
+    }
+    LOGV("Enabling backlight\n");
+    snprintf(buffer, sizeof(buffer), "%d\n", on ? level : 0);
+    res = write(fd, buffer, strlen(buffer));
+    if (res < 0) {
+        LOGE("Could not write to backlight : %s\n", strerror(errno));
+    }
+    close(fd);
+    return;
+}
+
 static int request_suspend(bool enable) {
     if (!android::sysprop::ChargerProperties::enable_suspend().value_or(false)) {
         return 0;
@@ -328,6 +387,7 @@ void Charger::UpdateScreenState(int64_t now) {
         healthd_draw_.reset(new HealthdDraw(&batt_anim_));
 
         if (android::sysprop::ChargerProperties::disable_init_blank().value_or(false)) {
+            display_set_backlight(COLOR_BACKLIGHT, false);
             healthd_draw_->blank_screen(true);
             screen_blanked_ = true;
         }
@@ -337,6 +397,7 @@ void Charger::UpdateScreenState(int64_t now) {
     if (batt_anim_.num_cycles > 0 && batt_anim_.cur_cycle == batt_anim_.num_cycles) {
         reset_animation(&batt_anim_);
         next_screen_transition_ = -1;
+        display_set_backlight(COLOR_BACKLIGHT, false);
         healthd_draw_->blank_screen(true);
         screen_blanked_ = true;
         LOGV("[%" PRId64 "] animation done\n", now);
@@ -378,6 +439,10 @@ void Charger::UpdateScreenState(int64_t now) {
         }
     }
 
+    if (batt_anim_.cur_cycle == 0) {
+        display_set_backlight(COLOR_BACKLIGHT, true);
+    }
+
     /* draw the new frame (@ cur_frame) */
     healthd_draw_->redraw_screen(&batt_anim_, surf_unknown_);
 
@@ -473,6 +538,7 @@ void Charger::ProcessKey(int code, int64_t now) {
                    accordingly. */
                 if (property_get_bool("ro.enable_boot_charger_mode", false)) {
                     LOGW("[%" PRId64 "] booting from charger mode\n", now);
+                    display_set_backlight(COLOR_BACKLIGHT, false);
                     property_set("sys.boot_from_charger_mode", "1");
                 } else {
                     if (batt_anim_.cur_level >= boot_min_cap_) {
@@ -585,6 +651,24 @@ void Charger::OnHealthInfoChanged(const HealthInfo_2_1& health_info) {
     }
     health_info_ = health_info.legacy.legacy;
 
+    if (health_info_.batteryLevel <= 15) { // red
+        display_set_backlight(COLOR_RED, true);
+        display_set_backlight(COLOR_GREEN, false);
+        display_set_backlight(COLOR_BLUE, false);
+    } else if (health_info_.batteryLevel <= 90) { // yellow (red + green)
+        display_set_backlight(COLOR_RED, true);
+        display_set_backlight(COLOR_GREEN, true);
+        display_set_backlight(COLOR_BLUE, false);
+    } else if (health_info_.batteryLevel <= 99) { // green
+        display_set_backlight(COLOR_RED, false);
+        display_set_backlight(COLOR_GREEN, true);
+        display_set_backlight(COLOR_BLUE, false);
+    } else if (health_info_.batteryLevel == 100) { // blue
+        display_set_backlight(COLOR_RED, false);
+        display_set_backlight(COLOR_GREEN, false);
+        display_set_backlight(COLOR_BLUE, true);
+    }
+
     AdjustWakealarmPeriods(charger_online());
 }
 
-- 
2.25.1

